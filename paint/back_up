 <Canvas
                fx:id="canvas"
                width="1000"
                height="600"
                layoutX="0"
            />


/*public void onSaveAs() {
        //opening file chooser
        if (hasBeenOpened) {
            Alert alert = new Alert(AlertType.WARNING);
            alert.setTitle("Warning");
            alert.setContentText("Saving in an alternate file format may cause data loss. Continue?");
            Optional<ButtonType> rslt = alert.showAndWait();
            if ((rslt.isPresent()) && rslt.get() == ButtonType.OK) {
                FileChooser fileChooser = new FileChooser();
                fileChooser.setTitle("Save Image");
                file = fileChooser.showSaveDialog(Paint.getPrimaryStage());
                //get current screen and make a file
                Image image = canvas.snapshot(null, null);
                try {
                    ImageIO.write(SwingFXUtils.fromFXImage(image, null), "png", file);
                    saved = true;
                } catch (Exception e) {
                    System.out.println("Failed to save image.");
                }
            }
        } else {
            FileChooser fileChooser = new FileChooser();
            fileChooser.setTitle("Save Image");
            fileChooser.getExtensionFilters().addAll(
                    new FileChooser.ExtensionFilter("JPG", "*.jpg"),
                    new FileChooser.ExtensionFilter("PNG", "*.png"),
                    new FileChooser.ExtensionFilter("JPEG", "*.jpeg")
            );
            file = fileChooser.showSaveDialog(Paint.getPrimaryStage());

            //get current screen and make a file
            Image image = canvas.snapshot(null, null);
            try {
                ImageIO.write(SwingFXUtils.fromFXImage(image, null), "png", file);
                saved = true;
                hasBeenOpened = true;
            } catch (Exception e) {
                System.out.println("Failed to save image.");
            }
        }
    } */

/**
     * Saves the image if it has been saved before or has been opened from file
     * browser
     */
    //method for Save button
    public void onSave() {
        //if has not been saved before or opened from file, act like save as button
        if (!saved) {
            FileChooser fileChooser = new FileChooser();
            fileChooser.setTitle("Save Image");
            fileChooser.getExtensionFilters().addAll(
                    new FileChooser.ExtensionFilter("JPG", "*.jpg"),
                    new FileChooser.ExtensionFilter("PNG", "*.png"),
                    new FileChooser.ExtensionFilter("JPEG", "*.jpeg")
            );
            file = fileChooser.showSaveDialog(Paint.getPrimaryStage());

            //get current screen and make a file
            Image image = canvas.snapshot(null, null);
            try {
                ImageIO.write(SwingFXUtils.fromFXImage(image, null), "png", file);
                saved = true;
                canvas.setCanvasSaved(true);
                hasBeenOpened = true;
            } catch (Exception e) {
                System.out.println("Failed to save image.");
            }
            //if has been saved before or opened from file, do the following
        } else {
            //alert to confirm save
            Alert alert = new Alert(AlertType.CONFIRMATION);
            alert.setTitle("Save Work?");
            alert.setContentText("Overwrite File?");
            Optional<ButtonType> rslt = alert.showAndWait();
            //if user selectes ok, save the file
            if ((rslt.isPresent()) && rslt.get() == ButtonType.OK) {
                //get current screen and save it to the selected file
                try {
                    Image image = canvas.snapshot(null, null);
                    ImageIO.write(SwingFXUtils.fromFXImage(image, null), "png", file);
                    saved = true;
                    canvas.setCanvasSaved(true);
                    hasBeenOpened = true;
                } catch (Exception e) {
                    System.out.println("Failed to save image.");
                }
            }

        }
    }

public void onExit() {
        //if this a fresh project and the canvas has been edited
        if (!canvas.getCanvasSaved() && !saved) {
            //popup reminding the user work is not saved
            Alert alert = new Alert(AlertType.CONFIRMATION);
            alert.setTitle("Save Work?");
            alert.setContentText("Exiting will lose all progress. Save work?");
            Optional<ButtonType> rslt = alert.showAndWait();
            //if user selects ok to save, act like saveAs button
            if ((rslt.isPresent()) && rslt.get() == ButtonType.OK) {
                //opening file chooser
                FileChooser fileChooser = new FileChooser();
                fileChooser.setTitle("Save Image");
                file = fileChooser.showSaveDialog(Paint.getPrimaryStage());

                //get current screen and make a file
                backgroundSnap.setFill(Color.TRANSPARENT);
                Image image = canvas.snapshot(backgroundSnap, null);
                try {
                    ImageIO.write(SwingFXUtils.fromFXImage(image, null), "png", file);
                } catch (Exception e) {
                    System.out.println("Failed to save image.");
                }
                canvas.setCanvasSaved(true);
            } //if user chooses cancel button, the program will close and not save
            else if ((rslt.isPresent()) && rslt.get() == ButtonType.CANCEL) {
                Platform.exit();
                System.exit(0);
            }

            //if canvas has been edited but the work was already saved at lease
            //once or has been opened from a file, do the following
        } else if (!canvas.getCanvasSaved()) {
            //pop up reminding them work has not been saved
            Alert alert = new Alert(AlertType.CONFIRMATION);
            alert.setTitle("Save Work?");
            alert.setContentText("Exiting will lose all progress. Save work?");
            Optional<ButtonType> rslt = alert.showAndWait();
            //if they choose to save work, acts like save button when ok is pressed
            if ((rslt.isPresent()) && rslt.get() == ButtonType.OK) {
                //get current screen and save it to the selected file
                try {
                    backgroundSnap.setFill(Color.TRANSPARENT);
                    Image image = canvas.snapshot(backgroundSnap, null);
                    ImageIO.write(SwingFXUtils.fromFXImage(image, null), "png", file);
                    saved = true;
                    canvas.setCanvasSaved(true);
                } catch (Exception e) {
                    System.out.println("Failed to save image.");
                }
            }
            //after saving, exit the program
            Platform.exit();
            System.exit(0);
            //if the canvas not been edited, or the work was already saved and the
            //canvas has not been edited since last save, exit the program
        } else {
            Platform.exit();
            System.exit(0);
        }

    }


/**
     * Used to open a file into the canvas using an Open Dialogue
     */
    //method for Open button
    public void onOpen() {
        //opening file chooser
        FileChooser fileChooser = new FileChooser();
        configureFileChooser(fileChooser);
        file = fileChooser.showOpenDialog(Paint.getPrimaryStage());

        //put image on the canvas
        if (file != null) {
            Image image = new Image(file.toURI().toString());

            //setting the canvas to the size of the image
            canvas.setHeight(image.getHeight());
            canvas.setWidth(image.getWidth());
            graphicsContext.drawImage(image, 0, 0); //0 corresponds to x and y position, putting in center
            saved = true;
            hasBeenOpened = true;
        }
    }

/**
     * Upon clicking about button, opens up an alert about the program
     */
    //method for About button
    public void onAbout() {
        //creating a TextArea where the following will be stored to describe the progam
        TextArea textArea = new TextArea("Paint V2\n"
                + "The following program is a paint application. "
                + "You can open a picture by clicking: \n\n"
                + "File -> Open -> Select an image \n\n"
                + "Once a file is opened, you can draw on it. "
                + "Once you are done, save the file:\n\n"
                + "File -> Save As -> Save in desired directory");
        textArea.setEditable(false);
        textArea.setWrapText(true);

        Button patchNotes = new Button("Patch Notes");
        Button tools = new Button("Tools Tutorial");

        patchNotes.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent event) {
                File filePatch = new File("src/paint/paint_release.txt");
                Desktop desktop = Desktop.getDesktop();
                try {
                    desktop.open(filePatch);
                } catch (Exception e) {
                    System.out.println("error");
                }
            }
        });

        tools.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent event) {
                File filePatch = new File("src/paint/paint_tutorial.txt");
                Desktop desktop = Desktop.getDesktop();
                try {
                    desktop.open(filePatch);
                } catch (Exception e) {
                    System.out.println("error");
                }
            }
        });
        //creating GridPane to hold TextArea
        GridPane gridPane = new GridPane();
        gridPane.add(textArea, 0, 0); //0 corresponds to x and y position, putting in center
        gridPane.add(patchNotes, 0, 1);
        gridPane.add(tools, 0, 2);

        //creating the popup for the help menu
        Alert alert = new Alert(AlertType.INFORMATION); //setting type of alert it is
        alert.setTitle("About Paint");
        alert.getDialogPane().setContent(gridPane); //putting gridPane into alert
        alert.showAndWait(); //wait for user to do something with alert  
    }

/**
     * Provides a popup for resizing the canvas
     */
    //pop up to resize the canvas
    public void onResize() {
        //layout of popup
        GridPane gridPane = new GridPane();
        Label heightLabel = new Label("Height Value: ");
        Label widthLabel = new Label("Width Value: ");

        //getting height/width of current canvas
        TextField heightInput = new TextField(Double.toString(canvas.getHeight()));
        TextField widthInput = new TextField(Double.toString(canvas.getWidth()));
        Button update = new Button("Update"); //to update height/width of canvas

        //putting gridpane together
        gridPane.add(heightLabel, 0, 0);
        gridPane.add(heightInput, 1, 0);
        gridPane.add(widthLabel, 0, 1);
        gridPane.add(widthInput, 1, 1);
        gridPane.add(update, 1, 2);

        //pop up for resizing canvas
        Alert alert = new Alert(AlertType.INFORMATION); //setting type of alert it is
        alert.setTitle("Resize Canvas");
        alert.getDialogPane().setContent(gridPane); //putting gridPane into alert

        //what to do when clicking update button
        update.setOnAction(new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent event) {
                canvas.resizeCanvas(Double.parseDouble(heightInput.getText()), Double.parseDouble(widthInput.getText()));
                alert.close();
            }
        });
        alert.showAndWait();
    }


<MenuItem fx:id = "eraser" text = "Eraser" onAction="#onEraser"/>